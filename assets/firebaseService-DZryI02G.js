import{g as l,i as g,a as m,o as p,q as s,b as i,c as n,d as S,e as d,u,f as h,h as y}from"./firebase-BVsHjDpH.js";const w={apiKey:"your-api-key-here",authDomain:"precision-cabling-automation.firebaseapp.com",projectId:"precision-cabling-automation",storageBucket:"precision-cabling-automation.appspot.com",messagingSenderId:"123456789",appId:"your-app-id-here",measurementId:"your-measurement-id-here"},E=g(w),a=l(E);m(E);const o={APPOINTMENTS:"appointments",CREDENTIALS:"credentials",CUSTOMERS:"customers"},I={async getAll(){try{return(await y(s(n(a,o.APPOINTMENTS),i("date","asc")))).docs.map(r=>({id:r.id,...r.data()}))}catch(t){return console.error("Error fetching appointments:",t),[]}},async add(t){try{return{id:(await h(n(a,o.APPOINTMENTS),{...t,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()})).id,...t}}catch(r){throw console.error("Error adding appointment:",r),r}},async update(t,r){try{const e=d(a,o.APPOINTMENTS,t);return await u(e,{...r,updatedAt:new Date().toISOString()}),{id:t,...r}}catch(e){throw console.error("Error updating appointment:",e),e}},async delete(t){try{return await S(d(a,o.APPOINTMENTS,t)),t}catch(r){throw console.error("Error deleting appointment:",r),r}},onSnapshot(t){return p(s(n(a,o.APPOINTMENTS),i("date","asc")),r=>{const e=r.docs.map(c=>({id:c.id,...c.data()}));t(e)})}},T={async getAll(){try{return(await y(s(n(a,o.CREDENTIALS),i("serviceName","asc")))).docs.map(r=>({id:r.id,...r.data()}))}catch(t){return console.error("Error fetching credentials:",t),[]}},async add(t){try{return{id:(await h(n(a,o.CREDENTIALS),{...t,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()})).id,...t}}catch(r){throw console.error("Error adding credential:",r),r}},async update(t,r){try{const e=d(a,o.CREDENTIALS,t);return await u(e,{...r,updatedAt:new Date().toISOString()}),{id:t,...r}}catch(e){throw console.error("Error updating credential:",e),e}},async delete(t){try{return await S(d(a,o.CREDENTIALS,t)),t}catch(r){throw console.error("Error deleting credential:",r),r}},onSnapshot(t){return p(s(n(a,o.CREDENTIALS),i("serviceName","asc")),r=>{const e=r.docs.map(c=>({id:c.id,...c.data()}));t(e)})}},N={async getAll(){try{return(await y(s(n(a,o.CUSTOMERS),i("companyName","asc")))).docs.map(r=>({id:r.id,...r.data()}))}catch(t){return console.error("Error fetching customers:",t),[]}},async add(t){try{return{id:(await h(n(a,o.CUSTOMERS),{...t,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()})).id,...t}}catch(r){throw console.error("Error adding customer:",r),r}},async update(t,r){try{const e=d(a,o.CUSTOMERS,t);return await u(e,{...r,updatedAt:new Date().toISOString()}),{id:t,...r}}catch(e){throw console.error("Error updating customer:",e),e}},async delete(t){try{return await S(d(a,o.CUSTOMERS,t)),t}catch(r){throw console.error("Error deleting customer:",r),r}},onSnapshot(t){return p(s(n(a,o.CUSTOMERS),i("companyName","asc")),r=>{const e=r.docs.map(c=>({id:c.id,...c.data()}));t(e)})}};export{I as a,N as b,T as c};
